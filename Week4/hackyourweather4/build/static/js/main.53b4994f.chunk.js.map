{"version":3,"sources":["components/Delete.js","components/CountryCard.js","components/Search.js","components/Error.js","components/Details.js","App.js","customHook.js","index.js"],"names":["Delete","handleDelete","onClick","className","CountryCard","countryInfo","countriesInfo","setCountriesInfo","handleClick","cod","id","name","to","sys","country","e","nodeToRemove","target","parentNode","newCountries","filter","weather","main","description","temp_min","toFixed","temp_max","coord","lat","lon","Search","props","type","placeholder","handleSearch","Error","error","Details","useState","forecast","setForecast","cityCountry","setCityCountry","cityId","window","location","pathname","slice","length","useEffect","fetch","process","then","res","json","data","console","log","city","list","map","info","x","dt_txt","y","Math","round","temp","forecastData","width","height","margin","top","right","bottom","left","dataKey","unit","range","cursor","strokeDasharray","fill","line","require","config","App","setError","a","preventDefault","previousSibling","value","setTimeout","useGetCountries","path","index","key","ReactDOM","render","document","getElementById"],"mappings":"mUAEO,SAASA,EAAT,GAAgC,IAAfC,EAAc,EAAdA,aACpB,OAAO,uBAAGC,QAASD,EAAcE,UAAU,8B,mBCGxC,SAASC,EAAT,GAAgF,IAA1DC,EAAyD,EAAzDA,YAAYC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,iBAA8B,EAAbC,YAQrE,OAAIH,GACuB,KAAnBA,EAAYI,IAER,yBAAKC,GAAIL,EAAYM,KAAMR,UAAY,eACnC,yBAAKA,UAAU,QACX,4BAAI,kBAAC,IAAD,CAAMS,GAAE,YAAOP,EAAYK,KAAOL,EAAYM,MAAlD,KAAiEN,EAAYQ,IAAIC,SACjF,kBAACd,EAAD,CAAQC,aAZ5B,SAAsBc,GAClB,IAAMC,EAAgBD,EAAEE,OAAOC,WAAWA,WACpCC,EAAeb,EAAcc,QAAO,SAAAf,GAAW,OAAIA,EAAYM,MAAQK,EAAaN,MAC1FH,EAAiBY,OAWL,4BAAKd,EAAYgB,QAAQ,GAAGC,MAC5B,2BAAIjB,EAAYgB,QAAQ,GAAGE,aAC3B,yCAAelB,EAAYiB,KAAKE,SAAW,QAAQC,QAAQ,GAA3D,MACA,yCAAepB,EAAYiB,KAAKI,SAAW,QAAQD,QAAQ,GAA3D,MACA,wCAAcpB,EAAYsB,MAAMC,IAAhC,KAAuCvB,EAAYsB,MAAME,MAI5D,qC,OC3BV,SAASC,EAAOC,GACnB,OACI,0BAAM5B,UAAU,UACZ,uBAAGA,UAAU,kBAAoB,2BAAO6B,KAAK,OAAOC,YAAY,gBAChE,4BAAQD,KAAK,SAAS9B,QAAS6B,EAAMG,cAArC,W,OCJL,SAASC,EAAT,GAAwB,IAARC,EAAO,EAAPA,MACnB,OAAIA,EACO,uBAAGjC,UAAY,SAASiC,GACtB,qC,6BCQV,SAASC,IAAU,IAAD,IACWC,mBAAS,IADpB,mBACdC,EADc,KACJC,EADI,OAEiBF,mBAAS,IAF1B,mBAEdG,EAFc,KAEDC,EAFC,KAIfC,EAASC,OAAOC,SAASC,SAASC,MAAM,EAAGH,OAAOC,SAASC,SAASE,QAkB1E,OAfAC,qBAAU,WACNC,MAAM,uDAAD,OAAwDP,EAAxD,kBALQQ,qCAMRC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAGF,OAFAC,QAAQC,IAAIF,GACZb,EAAe,GAAD,OAAIa,EAAKG,KAAK/C,KAAd,aAAuB4C,EAAKG,KAAK5C,UAE3CyC,EAAKI,KAAKC,KAAI,SAAAC,GACV,MAAO,CAACC,EAAED,EAAKE,OAAOhB,MAAM,EAAE,IAAKiB,EAAEC,KAAKC,MAAML,EAAKvC,KAAK6C,KAAO,eAI5Ef,MAAK,SAAAgB,GAAY,OAAI5B,EAAY4B,QACvC,IAGC,yBAAKjE,UAAU,WACX,kBAAC,IAAD,CAAMS,GAAG,KAAI,yCACb,6BACI,4BAAK6B,GACL,kBAAC,IAAD,CACI4B,MAAO,IACPC,OAAQ,IACRC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAEhD,kBAAC,IAAD,MACA,kBAAC,KAAD,GAAOC,QAAS,KAAhB,wBAA6B,KAA7B,qBAAsC,aAAtC,2BAA6D,cAA7D,IACA,kBAAC,IAAD,CAAO5C,KAAK,SAAS4C,QAAS,IAAKjE,KAAK,OAAOkE,KAAK,MACpD,kBAAC,IAAD,CAAOC,MAAO,CAAC,OACf,kBAAC,IAAD,CAASC,OAAQ,CAAEC,gBAAiB,SACpC,kBAAC,IAAD,CAASzB,KAAMhB,EAAU0C,KAAK,UAAUC,MAAI,O,kDC3ChEC,EAAQ,KAAUC,SAoCHC,MAjCf,WAAgB,IAAD,ECTR,WAA2B,IAAD,EACa/C,mBAAS,IADtB,mBACtBhC,EADsB,KACPC,EADO,OAEH+B,mBAAS,MAFN,mBAEtBF,EAFsB,KAEfkD,EAFe,iDAI7B,WAA4BvE,GAA5B,mBAAAwE,EAAA,6DACIxE,EAAEyE,iBACI9B,EAAO3C,EAAEE,OAAOwE,gBAAgBC,MACtC3E,EAAEE,OAAOwE,gBAAgBC,MAAQ,GAHrC,kBAM0BxC,MAAM,qDAAD,OAAsDQ,EAAtD,kBAAoEP,qCANnG,cAMcE,EANd,gBAO2BA,EAAIC,OAP/B,UAQuB,MADTC,EAPd,QAQgB9C,IARhB,uBASc,IAAI0B,MATlB,QAWQ5B,EAAiB,GAAD,mBAAKD,GAAL,CAAoBiD,KAX5C,0DAcI+B,EAAS,6BACTK,YAAW,kBAAML,EAAS,QAAM,KAfpC,mEAJ6B,sBAuB7B,MAAO,CAvBsB,4CAuBPhF,EAAeC,EAAkB6B,GDbMwD,GADlD,mBACN1D,EADM,KACQ5B,EADR,KACuBC,EADvB,KACyC6B,EADzC,KAGb,OACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyD,KAAK,YACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,KACV,yBAAK1F,UAAU,OACb,uCACA,kBAAC,EAAD,CAAQ+B,aAAcA,IACtB,kBAAC,EAAD,CAAOE,MAAOA,IACb9B,EAAcsD,KAAI,SAACvD,EAAYyF,GAC9B,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLvF,iBAAkBA,EAClBD,cAAeA,EACfD,YAAaA,YE5B/B2F,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.53b4994f.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Delete({handleDelete}){\n    return <i onClick={handleDelete} className=\"far fa-times-circle fa-2x\"></i>;\n};","import React from 'react';\nimport {Delete} from './Delete';\nimport {Link} from \"react-router-dom\";\nimport '../styles/CountryCard.scss';\n\n\nexport function CountryCard({countryInfo,countriesInfo, setCountriesInfo,handleClick}){\n\n    function handleDelete(e){\n        const nodeToRemove =  e.target.parentNode.parentNode;\n        const newCountries = countriesInfo.filter(countryInfo => countryInfo.name != nodeToRemove.id);\n        setCountriesInfo(newCountries);\n    };\n\n    if (countryInfo){\n        if (countryInfo.cod == 200){\n            return(\n                <div id={countryInfo.name} className = \"countryCard\">\n                    <div className=\"head\">\n                        <h1><Link to={`/:${countryInfo.id}`}>{countryInfo.name}</Link>, {countryInfo.sys.country}</h1>\n                        <Delete handleDelete={handleDelete} />\n                    </div>\n                    <h2>{countryInfo.weather[0].main}</h2>\n                    <p>{countryInfo.weather[0].description}</p>\n                    <p>min temp: {(countryInfo.main.temp_min - 273.15).toFixed(2)} C</p>\n                    <p>max temp: {(countryInfo.main.temp_max - 273.15).toFixed(2)} C</p>\n                    <p>location: {countryInfo.coord.lat}, {countryInfo.coord.lon}</p>\n                </div>\n            );  \n        }else return <></>;    \n    }else return <></>;\n};","import React from 'react';\nimport '../styles/Search.scss';\n\nexport function Search(props){\n    return (\n        <form className=\"search\">\n            <i className=\"fas fa-search\"></i><input type=\"text\" placeholder=\"Search City\" />\n            <button type=\"submit\" onClick={props.handleSearch}>Search</button>\n        </form>\n    );\n};","import React from 'react';\nimport '../styles/Error.scss';\n\nexport function Error({error}){\n    if (error){\n        return <p className = \"error\">{error}</p>;\n    }else return <></>;\n};","import React, { useState, useEffect } from 'react';\nimport {Link} from 'react-router-dom';\nimport '../styles/Details.scss';\nimport {\n    ScatterChart,\n    Scatter,\n    XAxis,\n    YAxis,\n    ZAxis,\n    CartesianGrid,\n    Tooltip\n} from \"recharts\";\n\n\nexport function Details(){\n    const [forecast, setForecast] = useState({});\n    const [cityCountry, setCityCountry] = useState(\"\");\n    const API_KEY =  process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n    const cityId = window.location.pathname.slice(2, window.location.pathname.length);\n    let cityName = \"\";\n\n    useEffect(() => {\n        fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${cityId}&APPID=${API_KEY}`)\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setCityCountry(`${data.city.name}, ${data.city.country}`);\n                return (\n                    data.list.map(info => {\n                        return {x:info.dt_txt.slice(0,16), y:Math.round(info.main.temp - 272.15)};\n                    })\n                );\n            })\n            .then(forecastData => setForecast(forecastData));\n    }, []);\n\n    return (\n        <div className=\"details\">\n            <Link to=\"/\"><button>Back</button></Link>\n            <div>\n                <h1>{cityCountry}</h1>\n                <ScatterChart\n                    width={1000}\n                    height={400}\n                    margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n                >\n                    <CartesianGrid />\n                    <XAxis dataKey={\"x\"} dataKey=\"x\" name=\"date-time\" fontFamily=\"sans-serif\"/>\n                    <YAxis type=\"number\" dataKey={\"y\"} name=\"temp\" unit=\"C\" />\n                    <ZAxis range={[100]} />\n                    <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n                    <Scatter data={forecast} fill=\"#8884d8\" line />\n                </ScatterChart>\n            </div>\n        </div>    \n    );\n};  ","import React, {useState} from 'react';\nimport './styles/App.scss';\nimport {CountryCard} from './components/CountryCard';\nimport {Search} from './components/Search';\nimport {Error} from './components/Error';\nimport {Details} from './components/Details';\nimport {useGetCountries} from './customHook';\nimport {BrowserRouter,Switch,Route} from \"react-router-dom\";\nrequire('dotenv').config()\n\n\nfunction App() {\n  const [handleSearch ,countriesInfo, setCountriesInfo, error] = useGetCountries();\n\n  return (\n    <BrowserRouter>\n\n      <Switch>\n        <Route path=\"/:cityId\">\n          <Details />\n        </Route>\n\n        <Route path=\"/\">\n          <div className=\"app\">\n            <h1>Weather</h1>\n            <Search handleSearch={handleSearch} />\n            <Error error={error} />\n            {countriesInfo.map((countryInfo,index) => { \n              return(\n                <CountryCard \n                  key={index} \n                  setCountriesInfo={setCountriesInfo} \n                  countriesInfo={countriesInfo} \n                  countryInfo={countryInfo}\n                />\n              )})}\n          </div>\n        </Route>  \n      </Switch>  \n\n    </BrowserRouter>  \n  );\n}\n\nexport default App;\n\n\n\n","import {useState} from 'react';\n\nexport function useGetCountries(){\n    const [countriesInfo, setCountriesInfo] = useState([]);\n    const [error, setError] = useState(null);\n\n    async function handleSearch(e){\n        e.preventDefault();\n        const city = e.target.previousSibling.value;\n        e.target.previousSibling.value = \"\";\n\n        try{\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_OPENWEATHERMAP_API_KEY}`);\n            const data = await res.json();\n            if(data.cod != 200){\n            throw new Error();\n            }else{\n            setCountriesInfo([...countriesInfo, data]);\n            }\n        }catch(e){\n        setError(\"No country by that name..\");\n        setTimeout(() => setError(null),2000);\n        };\n    };\n\n    return [handleSearch, countriesInfo, setCountriesInfo, error];\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}